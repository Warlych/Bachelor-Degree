services:
  neo4j:
    image: neo4j:5.19
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/password_neo4j
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["graph-data-science"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - default

  postgres_db:
    image: postgres:17.5
    container_name: postgres
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - default

  apis.gateway:
    build:
      context: ./src/Microservices/Apis/Apis.Gateway
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./src/Microservices/Apis/Apis.Gateway/appsettings.Development.json:/app/appsettings.Development.json
    networks:
      - backend
  
  metrics:
      build:
        context: ./src/Microservices/Metrics/Metrics.Presentation
        dockerfile: Dockerfile
      ports:
        - "5002:80"
      environment:
        - ASPNETCORE_ENVIRONMENT=Development
      volumes:
        - ./src/Microservices/Metrics/Metrics.Presentation/appsettings.Development.json:/app/appsettings.Development.json
      networks:
        - backend

  movements:
    build:
      context: ./src/Microservices/Movements/Movements.Presentation
      dockerfile: Dockerfile
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./src/Microservices/Movements/Movements.Presentation/appsettings.Development.json:/app/appsettings.Development.json
    networks:
      - backend

  railwaysections:
    build:
      context: ./src/Microservices/RailwaySections/RailwaySections.Presentation
      dockerfile: Dockerfile
    ports:
      - "5004:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./src/Microservices/RailwaySections/RailwaySections.Presentation/appsettings.Development.json:/app/appsettings.Development.json
    networks:
      - backend

  trains:
    build:
      context: ./src/Microservices/Trains/Trains.Presentation
      dockerfile: Dockerfile
    ports:
      - "5005:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./src/Microservices/Trains/Trains.Presentation/appsettings.Development.json:/app/appsettings.Development.json
    networks:
      - backend

volumes:
  data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
    
networks:
  backend:
    driver: bridge