// <auto-generated />
using System;
using System.Collections.Generic;
using Metrics.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Metrics.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250522012750_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetricTrain", b =>
                {
                    b.Property<Guid>("MetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_id");

                    b.Property<Guid>("_trainsId")
                        .HasColumnType("uuid")
                        .HasColumnName("_trains_id");

                    b.HasKey("MetricId", "_trainsId")
                        .HasName("pk_metric_trains");

                    b.HasIndex("_trainsId")
                        .HasDatabaseName("ix_metric_trains__trains_id");

                    b.ToTable("MetricTrains", (string)null);
                });

            modelBuilder.Entity("Metrics.Domain.Metrics.Entities.RailwaySection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("ExternalIdentifier", "Metrics.Domain.Metrics.Entities.RailwaySection.ExternalIdentifier#ExternalIdentifier", b1 =>
                        {
                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("external_identifier_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_railway_sections");

                    b.ToTable("railway_sections", (string)null);
                });

            modelBuilder.Entity("Metrics.Domain.Metrics.Entities.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("ExternalIdentifier", "Metrics.Domain.Metrics.Entities.Train.ExternalIdentifier#ExternalIdentifier", b1 =>
                        {
                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("external_identifier_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_trains");

                    b.ToTable("trains", (string)null);
                });

            modelBuilder.Entity("Metrics.Domain.Metrics.Metric", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_id");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_id");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Metrics.Domain.Metrics.Metric.DateRange#DateTimeRange", b1 =>
                        {
                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_range_from");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_range_to");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Metrics", "Metrics.Domain.Metrics.Metric.Metrics#RailwaySectionMetrics", b1 =>
                        {
                            b1.Property<double>("AverageGrossWeight")
                                .HasColumnType("double precision")
                                .HasColumnName("metrics_average_gross_weight");

                            b1.Property<double>("AverageLength")
                                .HasColumnType("double precision")
                                .HasColumnName("metrics_average_length");

                            b1.Property<double>("AverageNetWeight")
                                .HasColumnType("double precision")
                                .HasColumnName("metrics_average_net_weight");

                            b1.Property<double>("RouteSpeed")
                                .HasColumnType("double precision")
                                .HasColumnName("metrics_route_speed");

                            b1.Property<double>("SectionSpeed")
                                .HasColumnType("double precision")
                                .HasColumnName("metrics_section_speed");

                            b1.Property<double>("TechnicalSpeed")
                                .HasColumnType("double precision")
                                .HasColumnName("metrics_technical_speed");
                        });

                    b.HasKey("Id")
                        .HasName("pk_metrics");

                    b.HasIndex("FromId")
                        .HasDatabaseName("ix_metrics_from_id");

                    b.HasIndex("MetricId")
                        .HasDatabaseName("ix_metrics_metric_id");

                    b.ToTable("metrics", (string)null);
                });

            modelBuilder.Entity("MetricTrain", b =>
                {
                    b.HasOne("Metrics.Domain.Metrics.Metric", null)
                        .WithMany()
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_metric_trains_metrics_metric_id");

                    b.HasOne("Metrics.Domain.Metrics.Entities.Train", null)
                        .WithMany()
                        .HasForeignKey("_trainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_metric_trains_trains__trains_id");
                });

            modelBuilder.Entity("Metrics.Domain.Metrics.Metric", b =>
                {
                    b.HasOne("Metrics.Domain.Metrics.Entities.RailwaySection", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_metrics_railway_sections_from_id");

                    b.HasOne("Metrics.Domain.Metrics.Entities.RailwaySection", "To")
                        .WithMany()
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_metrics_railway_sections_metric_id");

                    b.Navigation("From");

                    b.Navigation("To");
                });
#pragma warning restore 612, 618
        }
    }
}
